trigger: none
pr: none

schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - main
  always: true

parameters:
- name: buildPhpVersion
  displayName: Build PHP version
  type: string
  default: 8.2
- name: buildImageType
  displayName: Build image type
  type: string
  default: apache
- name: platforms
  displayName: Build platforms
  type: string
  default: linux/amd64,linux/arm64,linux/arm/v7,linux/386
- name: repository
  displayName: Repository name
  type: string
  default: fireflyiii/core
- name: buildVersion
  displayName: Which version to build
  type: string
  default: develop

jobs:
- job: BuildFF3
  timeoutInMinutes: 10
  workspace:
    clean: all
  pool:
    vmImage: 'ubuntu-16.04'
    name: Default
  steps:
  - checkout: self
    persistCredentials: true
    clean: true
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes i
      docker buildx create --name firefly_iii_builder
      docker buildx inspect firefly_iii_builder --bootstrap
      docker buildx use firefly_iii_builder
    displayName: 'Set up builder'
  - script: |
      cd MainImage
      git switch -c main
      git branch --set-upstream-to=origin/main main
      echo "Update counters"
      BUILDNR=$(<"counter.txt")
      BUILDNR=$((BUILDNR + 1))
      echo $BUILDNR > counter.txt
      echo $(date '+%d-%m-%Y %T %Z') > date.txt
      git pull
      git status
      git add counter.txt
      git add date.txt
      git commit -m "Auto-update build files for build #${BUILDNR}."
      git push
    displayName: 'Commit changes to Git.'
  - script: |
      set -euo pipefail
      cd MainImage
      # label
      LABEL=${{ parameters.buildVersion }}
      VERSION=${{ parameters.buildVersion }}

      # if the version is an alpha version, push to "alpha":
      if [[ ${{ parameters.buildVersion }} == *"alpha"* ]]; then
        LABEL="alpha"
      fi

      # if the version is a beta version, push to "beta":
      if [[ ${{ parameters.buildVersion }} == *"beta"* ]]; then
        LABEL="beta"
      fi

      if [[ ${{ parameters.buildVersion }} != *"beta"* && ${{ parameters.buildVersion }} != *"alpha"* && ${{ parameters.buildVersion }} != *"dev"* ]]; then
        LABEL="latest"
      fi


      # build $LABEL when it's a dev version
      if [[ ${{ parameters.buildVersion }} == *"dev"* ]]; then
        echo "Will build development version under tag '$LABEL'."
        docker buildx build --pull  --progress=plain --no-cache --platform ${{ parameters.platforms }} --build-arg VERSION --build-arg version=${{ parameters.buildVersion }} --build-arg build_version=${{ parameters.buildVersion }} --build-arg build_base=${{ parameters.buildImageType }} --build-arg build_platform=${{ parameters.buildPhpVersion }} -t ${{ parameters.repository }}:$LABEL --push .
      fi

      # build version-$VERSION if not "develop".
      if [[ ${{ parameters.buildVersion }} != *"dev"* ]]; then
        echo "Will build prod version under tag $LABEL."
        
        # split the version into parts:
        currentversion=${{ parameters.buildVersion }}
        split=( ${currentversion//./ } )

        # build major tag
        docker buildx build --progress=plain --no-cache --platform ${{ parameters.platforms }} --build-arg VERSION --build-arg version=${{ parameters.buildVersion }} \
          --build-arg build_version=${{ parameters.buildVersion }} \
          --build-arg build_base=${{ parameters.buildImageType }} \
          --build-arg build_platform=${{ parameters.buildPhpVersion }} \
          --tag ${{ parameters.repository }}:version-${split[0]} \
          --tag ${{ parameters.repository }}:$LABEL \
          --tag ${{ parameters.repository }}:version-${split[0]}.${split[1]} \
          --tag ${{ parameters.repository }}:version-${{ parameters.buildVersion }} \
          --push .

      fi

    displayName: 'Build!'
    env:
      VERSION: ${{ parameters.buildVersion }}
  - checkout: self
    clean: true